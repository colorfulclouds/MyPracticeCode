Index: src/com/hehe/LinkedList/AddTwoNum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hehe.LinkedList;\r\n\r\nimport com.hehe.LinkedList.LinkedList.ListNode;\r\n\r\npublic class AddTwoNum {\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) { // 243 564 807  342+465=708\r\n        // 443 564 908  344+465=809\r\n        ListNode one = new ListNode(4);\r\n        one.next = new ListNode(4);\r\n        one.next.next = new ListNode(3);\r\n\r\n        ListNode two = new ListNode(5);\r\n        two.next = new ListNode(6);\r\n        two.next.next = new ListNode(4);\r\n        PrintList(addTwoNumbers(one, two));\r\n    }\r\n\r\n    public static ListNode addTwoNumbers(ListNode one, ListNode two) {\r\n        ListNode pre = new ListNode(0);\r\n        ListNode cur = pre;\r\n        int carry = 0;  //进位\r\n        while (one != null || two != null) {\r\n            int x = one.data;\r\n            int y = two.data;\r\n            int sum = x + y + carry;\r\n            carry = sum / 10;\r\n            sum = sum % 10;    //显示的和，在节点data域存储的数字\r\n            cur.next = new ListNode(sum);\r\n            cur = cur.next;  //cur指向新结点\r\n            one = one.next;\r\n            two = two.next;\r\n        }\r\n        //最高位需要进1\r\n        if (carry == 1) {\r\n            cur.next = new ListNode(carry);\r\n        }\r\n        return pre.next;\r\n    }\r\n\r\n    public static void PrintList(ListNode node) {\r\n        while (node != null) {\r\n            System.out.println(node.data);\r\n            node = node.next;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/com/hehe/LinkedList/AddTwoNum.java	(revision 49a4e2ff04d1cdadecf01189b626421177ab47d2)
+++ src/com/hehe/LinkedList/AddTwoNum.java	(date 1599539395342)
@@ -2,7 +2,7 @@
 
 import com.hehe.LinkedList.LinkedList.ListNode;
 
-public class AddTwoNum {
+public class    AddTwoNum {
     /**
      * @param args
      */
@@ -15,23 +15,49 @@
         ListNode two = new ListNode(5);
         two.next = new ListNode(6);
         two.next.next = new ListNode(4);
-        PrintList(addTwoNumbers(one, two));
+//        PrintList(addTwoNumbers(one, two));
+
+        System.out.println("=============================");
+        ListNode l1 = new ListNode(1);
+
+        ListNode l2 = new ListNode(9);
+        l2.next = new ListNode(9);
+        PrintList(addTwoNumbers(l1, l2));
+
+
     }
 
     public static ListNode addTwoNumbers(ListNode one, ListNode two) {
         ListNode pre = new ListNode(0);
         ListNode cur = pre;
         int carry = 0;  //进位
-        while (one != null || two != null) {
+        int sum = 0;
+        while (one != null && two != null) {
             int x = one.data;
             int y = two.data;
-            int sum = x + y + carry;
+            sum = x + y + carry;
             carry = sum / 10;
             sum = sum % 10;    //显示的和，在节点data域存储的数字
             cur.next = new ListNode(sum);
             cur = cur.next;  //cur指向新结点
             one = one.next;
             two = two.next;
+        }
+        while(one != null){
+            sum = one.data + carry;
+            carry = sum / 10;
+            sum = sum % 10;
+            cur.next = new ListNode(sum);
+            cur = cur.next;
+            one = one.next;
+        }
+        while(two != null){
+            sum = two.data + carry;
+            carry = sum / 10;
+            sum = sum % 10;
+            cur.next = new ListNode(sum);
+            cur = cur.next;
+            two = two.next;
         }
         //最高位需要进1
         if (carry == 1) {
